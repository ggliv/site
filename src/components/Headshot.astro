---
import { Picture } from "astro:assets";
import profileImage from "@/assets/images/profile.png";
export interface Props {
  width: number;
  height: number;
}
const { width, height } = Astro.props;
---

<ggliv-headshot data-width={width} data-height={height} class="display-none"
></ggliv-headshot>
<div
  class:list={[
    "max-w-full",
    "rounded-full",
    "border-4",
    "border-[gray]",
    "bg-white",
    "overflow-hidden",
  ]}
>
  <Picture
    src={profileImage}
    alt="Profile shot of Gabe Livengood"
    formats={["avif", "webp", "png"]}
    id="headshot-img"
    width={width}
    height={height}
  />
</div>

<script>
  // code based on the OGL mouse flowmap example
  import {
    Renderer,
    Program,
    TextureLoader,
    Mesh,
    Vec2,
    Flowmap,
    Plane,
  } from "ogl";
  import profileImage from "@/assets/images/profile.png";

  class GglivHeadshot extends HTMLElement {
    connectedCallback() {
      if (
        !window.matchMedia("(any-hover: hover)").matches ||
        window.matchMedia("(prefers-reduced-motion: reduce)").matches
      ) {
        // Abort on devices without a hovering pointer or where reduced motion is preferred
        return;
      }

      const width = Number(this.dataset.width),
        height = Number(this.dataset.height);
      const renderer = new Renderer({ dpr: 2, alpha: true, antialias: true });
      const gl = renderer.gl;

      // Variable inputs to control flowmap
      const mouse = new Vec2(-1);
      const velocity: Vec2 & { needsUpdate?: boolean } = new Vec2();

      renderer.setSize(width, height);

      const flowmap = new Flowmap(gl);
      const geometry = new Plane(gl, { width: 2, height: 2 });
      const texture = TextureLoader.load(gl, { src: profileImage.src });

      const program = new Program(gl, {
        vertex: /* glsl */ `
          attribute vec2 uv;
          attribute vec2 position;

          varying vec2 vUv;

          void main() {
           vUv = uv;
           gl_Position = vec4(position, 0, 1);
          }
        `,
        fragment: /* glsl */ `
          precision highp float;

          uniform sampler2D tProfile;
          uniform sampler2D tFlow;
          uniform float uTime;

          varying vec2 vUv;

          void main() {
            vec3 flow = texture2D(tFlow, vUv).rgb;

            // Use flow to adjust the uv lookup of a texture
            vec2 lookup = vUv + flow.xy * 0.02;
            gl_FragColor = texture2D(tProfile, lookup);

            // Hide stretched texture borders
            if (lookup.x > 1. || lookup.y > 1.) {
              gl_FragColor.a = 0.;
            }
          }
        `,
        uniforms: {
          uTime: { value: 0 },
          tProfile: { value: texture },
          tFlow: flowmap.uniform,
        },
      });

      const mesh = new Mesh(gl, { geometry, program });

      // Create handlers to get mouse position and velocity
      gl.canvas.addEventListener("mousemove", updatePosition, false);

      let lastTime: DOMHighResTimeStamp | null = null;
      const lastMouse = new Vec2();
      function updatePosition(e: MouseEvent) {
        const box = gl.canvas.getBoundingClientRect();
        mouse.x = e.pageX - (box.left + window.scrollX);
        mouse.y = e.pageY - (box.top + window.scrollY);

        // Get mouse value in 0 to 1 range, with y flipped
        mouse.set(
          mouse.x / gl.renderer.width,
          1 - mouse.y / gl.renderer.height,
        );

        // Calculate velocity
        if (!lastTime) {
          // First frame
          lastTime = performance.now();
          lastMouse.set(e.x, e.y);
        }

        const deltaX = e.x - lastMouse.x;
        const deltaY = e.y - lastMouse.y;

        lastMouse.set(e.x, e.y);

        let time = performance.now();

        // Avoid dividing by 0
        let delta = Math.max(10, time - lastTime);
        lastTime = time;

        velocity.x = deltaX / delta;
        velocity.y = deltaY / delta;

        // Flag update to prevent hanging velocity values when not moving
        velocity.needsUpdate = true;
      }

      requestAnimationFrame(function update(t: DOMHighResTimeStamp) {
        requestAnimationFrame(update);

        // Reset velocity when mouse not moving
        if (!velocity.needsUpdate) {
          mouse.set(-1);
          velocity.set(0);
        }
        velocity.needsUpdate = false;

        // Update flowmap inputs
        flowmap.aspect = 1;
        flowmap.mouse.copy(mouse);

        // Ease velocity input, slower when fading out
        flowmap.velocity.lerp(velocity, velocity.len() ? 0.5 : 0.1);

        flowmap.update();

        program.uniforms.uTime.value = t * 0.001;

        renderer.render({ scene: mesh });
      });

      window.addEventListener("DOMContentLoaded", () => {
        document.getElementById("headshot-img")!.replaceWith(gl.canvas);
      });
    }
  }
  customElements.define("ggliv-headshot", GglivHeadshot);
</script>
